# -*- coding: utf-8 -*-
# Copyright (c) 2025, Al-Aswany and contributors
# For license information, please see license.txt

import frappe
import json
from frappe import _
from frappe.utils import now_datetime, cint
from ..gemini.client import GeminiClient
from ..gemini.prompt_builder import PromptBuilder
from ..gemini.response_parser import ResponseParser
from ..gemini.exceptions import GeminiOutputError
from weasyprint import HTML, CSS
from io import BytesIO
import matplotlib.pyplot as plt
import pandas as pd
import base64

class ActionableOutputs:
    """
    Generate actionable outputs from Gemini AI responses.
    
    This class provides methods for generating various types of outputs
    such as charts, PDFs, and formatted reports based on AI responses.
    """
    
    def __init__(self):
        """Initialize the actionable outputs generator."""
        self.settings = frappe.get_single("Gemini Assistant Settings")
        self.client = GeminiClient()
        self.prompt_builder = PromptBuilder()
        self.response_parser = ResponseParser()
    
    def generate_pdf_report(self, content, title=None, template=None, css=None):
        """
        Generate a PDF report from content.
        
        Args:
            content (str): HTML content for the PDF
            title (str, optional): Title of the PDF
            template (str, optional): HTML template to use
            css (str, optional): Custom CSS for styling
            
        Returns:
            dict: Result with PDF file path
        """
        try:
            # Create temporary file path
            file_name = f"gemini_report_{frappe.utils.now().strftime('%Y%m%d%H%M%S')}.pdf"
            file_path = frappe.get_site_path('private', 'files', file_name)
            
            # Prepare HTML content
            if template:
                # Use provided template
                html_content = frappe.render_template(
                    template,
                    {
                        "title": title or "Gemini AI Report",
                        "content": content,
                        "date": frappe.utils.now().strftime('%Y-%m-%d %H:%M:%S'),
                        "user": frappe.session.user
                    }
                )
            else:
                # Use default template
                html_content = f"""
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <title>{title or "Gemini AI Report"}</title>
                    <style>
                        body {{
                            font-family: "Noto Sans CJK SC", "WenQuanYi Zen Hei", sans-serif;
                            margin: 2cm;
                            font-size: 12pt;
                        }}
                        h1 {{
                            color: #1a237e;
                            font-size: 24pt;
                            margin-bottom: 1cm;
                        }}
                        .header {{
                            border-bottom: 1px solid #ddd;
                            padding-bottom: 10px;
                            margin-bottom: 20px;
                        }}
                        .footer {{
                            border-top: 1px solid #ddd;
                            padding-top: 10px;
                            margin-top: 20px;
                            font-size: 10pt;
                            color: #666;
                        }}
                        table {{
                            width: 100%;
                            border-collapse: collapse;
                            margin: 20px 0;
                        }}
                        th, td {{
                            border: 1px solid #ddd;
                            padding: 8px;
                        }}
                        th {{
                            background-color: #f2f2f2;
                        }}
                        .page-break {{
                            page-break-after: always;
                        }}
                        {css or ""}
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>{title or "Gemini AI Report"}</h1>
                        <p>Generated on {frappe.utils.now().strftime('%Y-%m-%d %H:%M:%S')} by {frappe.session.user}</p>
                    </div>
                    
                    <div class="content">
                        {content}
                    </div>
                    
                    <div class="footer">
                        <p>Generated by ERPNext Gemini Integration</p>
                    </div>
                </body>
                </html>
                """
            
            # Generate PDF
            HTML(string=html_content).write_pdf(
                file_path,
                stylesheets=[
                    CSS(string='@page { size: A4; margin: 2cm }')
                ]
            )
            
            # Create File document
            file_doc = frappe.get_doc({
                "doctype": "File",
                "file_name": file_name,
                "file_url": f"/private/files/{file_name}",
                "is_private": 1,
                "attached_to_doctype": "Gemini Conversation",
                "attached_to_name": frappe.form_dict.get("conversation") or "General"
            })
            file_doc.insert(ignore_permissions=True)
            
            # Log the PDF generation
            self._log_output_generation("PDF Report", file_doc.file_url)
            
            return {
                "success": True,
                "file_url": file_doc.file_url,
                "file_name": file_name,
                "message": "PDF report generated successfully"
            }
            
        except Exception as e:
            frappe.log_error(f"Error generating PDF report: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def generate_chart(self, data, chart_type="bar", title=None, x_label=None, y_label=None, as_image=True):
        """
        Generate a chart from data.
        
        Args:
            data (dict or list): Data for the chart
            chart_type (str): Type of chart (bar, line, pie, scatter)
            title (str, optional): Chart title
            x_label (str, optional): X-axis label
            y_label (str, optional): Y-axis label
            as_image (bool): Whether to return as image or JSON
            
        Returns:
            dict: Result with chart data or image
        """
        try:
            # Convert data to pandas DataFrame if needed
            if isinstance(data, list) and all(isinstance(item, dict) for item in data):
                df = pd.DataFrame(data)
            elif isinstance(data, dict):
                # Handle dict with lists
                if all(isinstance(data[key], list) for key in data):
                    df = pd.DataFrame(data)
                else:
                    # Handle dict with values
                    df = pd.DataFrame(list(data.items()), columns=['Category', 'Value'])
            else:
                df = pd.DataFrame(data)
            
            # Create figure and axis
            plt.figure(figsize=(10, 6))
            
            # Generate chart based on type
            if chart_type == "bar":
                if 'Category' in df.columns and 'Value' in df.columns:
                    ax = df.plot(kind='bar', x='Category', y='Value')
                else:
                    ax = df.plot(kind='bar')
            
            elif chart_type == "line":
                ax = df.plot(kind='line')
            
            elif chart_type == "pie":
                if 'Category' in df.columns and 'Value' in df.columns:
                    ax = df.plot(kind='pie', y='Value', labels=df['Category'])
                else:
                    ax = df.plot(kind='pie', subplots=True)
            
            elif chart_type == "scatter":
                if len(df.columns) >= 2:
                    ax = df.plot(kind='scatter', x=df.columns[0], y=df.columns[1])
                else:
                    raise ValueError("Scatter plot requires at least two columns of data")
            
            else:
                raise ValueError(f"Unsupported chart type: {chart_type}")
            
            # Add title and labels
            if title:
                plt.title(title)
            
            if x_label:
                plt.xlabel(x_label)
            
            if y_label:
                plt.ylabel(y_label)
            
            plt.tight_layout()
            
            if as_image:
                # Save chart to BytesIO
                img_buffer = BytesIO()
                plt.savefig(img_buffer, format='png')
                img_buffer.seek(0)
                
                # Create temporary file
                file_name = f"gemini_chart_{frappe.utils.now().strftime('%Y%m%d%H%M%S')}.png"
                file_path = frappe.get_site_path('private', 'files', file_name)
                
                # Save to file
                with open(file_path, 'wb') as f:
                    f.write(img_buffer.getvalue())
                
                # Create File document
                file_doc = frappe.get_doc({
                    "doctype": "File",
                    "file_name": file_name,
                    "file_url": f"/private/files/{file_name}",
                    "is_private": 1,
                    "attached_to_doctype": "Gemini Conversation",
                    "attached_to_name": frappe.form_dict.get("conversation") or "General"
                })
                file_doc.insert(ignore_permissions=True)
                
                # Log the chart generation
                self._log_output_generation("Chart Image", file_doc.file_url)
                
                # Close the plot to free memory
                plt.close()
                
                return {
                    "success": True,
                    "file_url": file_doc.file_url,
                    "file_name": file_name,
                    "message": "Chart generated successfully"
                }
            
            else:
                # Return chart as JSON for frontend rendering
                # Convert DataFrame to dict for JSON serialization
                chart_data = {
                    "type": chart_type,
                    "title": title,
                    "x_label": x_label,
                    "y_label": y_label,
                    "data": df.to_dict(orient='records')
                }
                
                # Log the chart generation
                self._log_output_generation("Chart JSON", None)
                
                # Close the plot to free memory
                plt.close()
                
                return {
                    "success": True,
                    "chart_data": chart_data,
                    "message": "Chart data generated successfully"
                }
            
        except Exception as e:
            # Close any open plots to free memory
            plt.close('all')
            
            frappe.log_error(f"Error generating chart: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def generate_formatted_report(self, content, format_type="html", title=None):
        """
        Generate a formatted report from content.
        
        Args:
            content (str): Content for the report
            format_type (str): Format type (html, markdown, text)
            title (str, optional): Report title
            
        Returns:
            dict: Result with report content
        """
        try:
            # Prepare report content
            if format_type == "html":
                # Format as HTML
                formatted_content = f"""
                <div class="gemini-report">
                    <h1>{title or "Gemini AI Report"}</h1>
                    <div class="report-content">
                        {content}
                    </div>
                </div>
                """
            
            elif format_type == "markdown":
                # Format as Markdown
                formatted_content = f"""
                # {title or "Gemini AI Report"}
                
                {content}
                
                ---
                Generated by ERPNext Gemini Integration on {frappe.utils.now().strftime('%Y-%m-%d %H:%M:%S')}
                """
            
            else:  # text
                # Format as plain text
                formatted_content = f"""
                {title or "GEMINI AI REPORT"}
                ===============================
                
                {content}
                
                ------------------------------
                Generated by ERPNext Gemini Integration on {frappe.utils.now().strftime('%Y-%m-%d %H:%M:%S')}
                """
            
            # Create temporary file
            file_name = f"gemini_report_{frappe.utils.now().strftime('%Y%m%d%H%M%S')}.{format_type}"
            file_path = frappe.get_site_path('private', 'files', file_name)
            
            # Save to file
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(formatted_content)
            
            # Create File document
            file_doc = frappe.get_doc({
                "doctype": "File",
                "file_name": file_name,
                "file_url": f"/private/files/{file_name}",
                "is_private": 1,
                "attached_to_doctype": "Gemini Conversation",
                "attached_to_name": frappe.form_dict.get("conversation") or "General"
            })
            file_doc.insert(ignore_permissions=True)
            
            # Log the report generation
            self._log_output_generation(f"{format_type.upper()} Report", file_doc.file_url)
            
            return {
                "success": True,
                "file_url": file_doc.file_url,
                "file_name": file_name,
                "content": formatted_content,
                "message": f"{format_type.upper()} report generated successfully"
            }
            
        except Exception as e:
            frappe.log_error(f"Error generating formatted report: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def generate_data_table(self, data, title=None, description=None):
        """
        Generate an HTML data table from structured data.
        
        Args:
            data (list): List of dictionaries with data
            title (str, optional): Table title
            description (str, optional): Table description
            
        Returns:
            dict: Result with HTML table
        """
        try:
            # Convert data to pandas DataFrame
            df = pd.DataFrame(data)
            
            # Generate HTML table
            html_table = df.to_html(classes='table table-striped table-bordered', index=False)
            
            # Add title and description
            html_content = f"""
            <div class="gemini-data-table">
                <h2>{title or "Data Table"}</h2>
                {f"<p>{description}</p>" if description else ""}
                {html_table}
            </div>
            """
            
            # Log the table generation
            self._log_output_generation("Data Table", None)
            
            return {
                "success": True,
                "html": html_content,
                "message": "Data table generated successfully"
            }
            
        except Exception as e:
            frappe.log_error(f"Error generating data table: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def extract_structured_data(self, prompt, context=None):
        """
        Extract structured data from AI response.
        
        Args:
            prompt (str): Prompt for data extraction
            context (dict, optional): Additional context
            
        Returns:
            dict: Result with structured data
        """
        try:
            # Build prompt for structured data extraction
            extraction_prompt = f"""
            {prompt}
            
            Please provide the response in valid JSON format only, with no additional text.
            The JSON should be properly formatted and parseable.
            """
            
            # Get AI response
            response = self.client.generate_text(extraction_prompt, context)
            
            # Parse response to extract JSON
            content = response.get("content", "")
            
            # Try to find JSON in the response
            json_start = content.find('{')
            json_end = content.rfind('}')
            
            if json_start >= 0 and json_end > json_start:
                json_str = content[json_start:json_end+1]
                try:
                    # Parse JSON
                    structured_data = json.loads(json_str)
                    
                    # Log the data extraction
                    self._log_output_generation("Structured Data", None)
                    
                    return {
                        "success": True,
                        "data": structured_data,
                        "message": "Structured data extracted successfully"
                    }
                except json.JSONDecodeError:
                    raise GeminiOutputError("Failed to parse JSON from AI response")
            else:
                raise GeminiOutputError("No JSON found in AI response")
            
        except Exception as e:
            frappe.log_error(f"Error extracting structured data: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def _log_output_generation(self, output_type, file_url):
        """
        Log output generation to the audit log.
        
        Args:
            output_type (str): Type of output generated
            file_url (str, optional): URL of generated file
        """
        try:
            audit_log = frappe.get_doc({
                "doctype": "Gemini Audit Log",
                "timestamp": now_datetime(),
                "user": frappe.session.user,
                "action_type": "Output Generation",
                "details": json.dumps({
                    "output_type": output_type,
                    "file_url": file_url,
                    "timestamp": str(now_datetime())
                }),
                "status": "Success",
                "ip_address": frappe.local.request_ip if hasattr(frappe.local, "request_ip") else "127.0.0.1"
            })
            
            audit_log.insert(ignore_permissions=True)
            frappe.db.commit()
            
        except Exception as e:
            frappe.log_error(f"Error logging output generation: {str(e)}")
